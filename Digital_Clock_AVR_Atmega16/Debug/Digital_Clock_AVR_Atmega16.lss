
Digital_Clock_AVR_Atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000060c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000770  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_1>
   8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_18>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 00 01 	call	0x200	; 0x200 <main>
  64:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PORTS_INIT>:
 */
#define F_CPU 1000000
#include <avr/io.h>
#include <avr/interrupt.h>

void PORTS_INIT(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
    //init port c for 7447 decoder
    DDRC|=0X0F;//FIRST 4 PINS AS OUTPUT;
  74:	a4 e3       	ldi	r26, 0x34	; 52
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e4 e3       	ldi	r30, 0x34	; 52
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8f 60       	ori	r24, 0x0F	; 15
  80:	8c 93       	st	X, r24
    PORTC&=~0x0F;//set the 4 pins as 0
  82:	a5 e3       	ldi	r26, 0x35	; 53
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e5 e3       	ldi	r30, 0x35	; 53
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 7f       	andi	r24, 0xF0	; 240
  8e:	8c 93       	st	X, r24

    /////init port a for 7 seg anodes
    DDRA|=0X3F;//FIRST 6 PORTS AS OUTPUT;
  90:	aa e3       	ldi	r26, 0x3A	; 58
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ea e3       	ldi	r30, 0x3A	; 58
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 63       	ori	r24, 0x3F	; 63
  9c:	8c 93       	st	X, r24
    PORTA &=~ 0X3F;//SET THE 6 PINS AS ZERO
  9e:	ab e3       	ldi	r26, 0x3B	; 59
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	eb e3       	ldi	r30, 0x3B	; 59
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 7c       	andi	r24, 0xC0	; 192
  aa:	8c 93       	st	X, r24
}
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <TIMER1_INIT>:
void TIMER1_INIT()
{
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62

	}
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <INT0_INIT>:

void INT0_INIT()
{
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
    //falling edge internal pullup init
    DDRD&=~(1<<PD2);//SET PD2 AS INPUT;
  c8:	a1 e3       	ldi	r26, 0x31	; 49
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e1 e3       	ldi	r30, 0x31	; 49
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8b 7f       	andi	r24, 0xFB	; 251
  d4:	8c 93       	st	X, r24
    PORTD|=(1<<PD2);//ENABLE INTERNAL PULLUP RESISTOR FOR PD2
  d6:	a2 e3       	ldi	r26, 0x32	; 50
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e2 e3       	ldi	r30, 0x32	; 50
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	8c 93       	st	X, r24
    GICR|=(1<<INT0);//ENABLE INTERRUPTS FOR PORTD2/INT0
  e4:	ab e5       	ldi	r26, 0x5B	; 91
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	eb e5       	ldi	r30, 0x5B	; 91
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	8c 93       	st	X, r24

    //ENABLE FALLING EDGE INTERRUPT:
    MCUCR|=(1<<ISC01);//
  f2:	a5 e5       	ldi	r26, 0x55	; 85
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e5 e5       	ldi	r30, 0x55	; 85
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8c 93       	st	X, r24
    MCUCR&=~(1<<ISC00);//
 100:	a5 e5       	ldi	r26, 0x55	; 85
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e5 e5       	ldi	r30, 0x55	; 85
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	8c 93       	st	X, r24


	}
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <INT1_INIT>:
    //////////////ISR FOR INT0

void INT1_INIT()
{
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
    //rising edge using the external pull down
        DDRD&=~(1<<PD3);//SET PD3 AS INPUT;
 11c:	a1 e3       	ldi	r26, 0x31	; 49
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e1 e3       	ldi	r30, 0x31	; 49
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	87 7f       	andi	r24, 0xF7	; 247
 128:	8c 93       	st	X, r24
    PORTD&=~(1<<PD3);//DISABLE INTERNAL PULLUP RESISTOR FOR PD3
 12a:	a2 e3       	ldi	r26, 0x32	; 50
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e2 e3       	ldi	r30, 0x32	; 50
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	8c 93       	st	X, r24
    GICR|=(1<<INT1);//ENABLE INTERRUPTS FOR PORTD3/INT1
 138:	ab e5       	ldi	r26, 0x5B	; 91
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	eb e5       	ldi	r30, 0x5B	; 91
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8c 93       	st	X, r24

    MCUCR|=(1<<ISC11)|(1<<ISC10);// //ENABLE RISING EDGE INTERRUPT:
 146:	a5 e5       	ldi	r26, 0x55	; 85
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	e5 e5       	ldi	r30, 0x55	; 85
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8c 60       	ori	r24, 0x0C	; 12
 152:	8c 93       	st	X, r24
	}
 154:	cf 91       	pop	r28
 156:	df 91       	pop	r29
 158:	08 95       	ret

0000015a <INT2_INIT>:

void INT2_INIT()
{
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
    //Falling edge using the internal pull up
        DDRB&=~(1<<PB2);//SET PB2 AS INPUT;
 162:	a7 e3       	ldi	r26, 0x37	; 55
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e7 e3       	ldi	r30, 0x37	; 55
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	8c 93       	st	X, r24
    PORTB|=(1<<PB2);//ENABLE INTERNAL PULLUP RESISTOR FOR PB2
 170:	a8 e3       	ldi	r26, 0x38	; 56
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e8 e3       	ldi	r30, 0x38	; 56
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	8c 93       	st	X, r24
    GICR|=(1<<INT2);//ENABLE INTERRUPTS FOR PORTB2/INT1
 17e:	ab e5       	ldi	r26, 0x5B	; 91
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	eb e5       	ldi	r30, 0x5B	; 91
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 62       	ori	r24, 0x20	; 32
 18a:	8c 93       	st	X, r24

    //ENABLE FALLING EDGE INTERRUPT:
    MCUCSR&=~(1<<ISC2);//
 18c:	a4 e5       	ldi	r26, 0x54	; 84
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e4 e5       	ldi	r30, 0x54	; 84
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 7b       	andi	r24, 0xBF	; 191
 198:	8c 93       	st	X, r24

}
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	08 95       	ret

000001a0 <__vector_1>:


ISR(INT0_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
    //reset clock

}
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_18>:

ISR(INT2_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
//resume the stop watch.
}
 1d2:	cf 91       	pop	r28
 1d4:	df 91       	pop	r29
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_2>:
ISR(INT1_vect)
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
    ////pause stopwatch
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <main>:
 */

#include "APIs/APIs.h"
#include "util/delay.h"
int main()
{
 200:	df 93       	push	r29
 202:	cf 93       	push	r28
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
	void INT0_INIT();
	void INT2_INIT();
	void PORTS_INIT();


	}
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
